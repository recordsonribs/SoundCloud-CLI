#!/usr/bin/ruby
# ^ enter your ruby location above

begin
  require 'rubygems'
rescue LoadError
  puts "You don't seem to have installed rubygems - how do you do anything?"
  puts "See http://docs.rubygems.org/read/chapter/3 for details"
  exit (1)
end

require '../lib/sc'

program :name, 'Soundcloud CLI'
program :version, '0.1'
program :description, 'Command-line interface to SoundCloud.'
program :help, 'Author', 'Alex Andrews (alex@recordonribs.com)'
program :int_message, 'Interupted.'

command :upload do |c|
  c.syntax = 'sc upload [tracks or track directory]'
  c.description = 'Uploads file(s) specified on command line to Soundcloud, reading the tags from FLAC files.'
  c.example 'Scans directory /home/ror/flac/album for files and uploads them to SoundCloud.','sc upload /home/ror/flac/album'
  c.example 'Uploads flac file /home/ror/flac/album/01.flac to SoundCloud.','sc upload /home/ror/flac/album/01.flac'
  
  c.option '--silent','No output'
  c.option '--set STRING', String, 'Name of playlist'
  
  load_settings
  
  c.when_called do |args, options|
    args.each do | arg |
      file_path = arg
        
      if ! File.exist?(file_path)
        puts "#{file_path} does not exist"
        exit (1)
      end

      # If they have specified a playlist name, then make that playlist
      # TODO Move this to a more abstract layer for cleaness
      if options.set
        puts "Uploading set #{options.set}"
        pl = soundcloud.Playlist.new
        pl.title = options.set
      end
      
      if File.directory?(file_path)
        print "Scanning directory #{file_path}..."
        Dir.foreach(file_path) do |f|
          # Check to see if it is a music file, toss if not
          
          path = File.expand_path(File.join(file_path,f))
          dir = File.basename(file_path)
          upload_track (file_path)

          if options.set 
            pl.tracks << track
          end
          
          puts "done"
          $stdout.flush
        end    
      else
        puts "Scanning file #{file_path}"     
        path = File.expand_path(file_path)
        dir = File.basename(file_path)
        upload_track(file_path)
          
        # If they have specified a playlist, then add track to it, remembering we may have many tracks
        if options.set 
          pl.tracks << track
        end
      end
      
      if options.set
        print "Attempting to save playlist #{pl.title}..."
        $stdout.flush
        pl.save
        puts "saved"
        $stdout.flush
      end
    end
  end
end

command :release do |c|
  c.syntax = 'sc release [directory]'
  c.description = 'Uploads files from specified directory to Soundcloud, reading the tags from files, but assumes these are part of a single release.'
  c.example 'Scans directory /home/ror/flac/album for a release and uploads them to SoundCloud.','sc release /home/ror/flac/album'
  
  c.when_called do |args, options|
    args.each do | arg |
      file_path = arg
            
      if ! File.exist?('file_path')
        puts "#{file_path} does not exist"
        exit (1)
      end
      
      if ! File.directory?('file_path')
        puts "#{file_path} is not a directory, release mode needs to have a directory to upload"
        exit (1)
      end
      
      Dir.foreach(file_path) do |f|
          path = File.expand_path(File.join(file_path,f))
          dir = File.basename(file_path)
          
          # We assume the first track gives us the details of the playlist
      end
    end
  end
end
